% fff
%
% 30571 - Smart city sensor
% 
% Data processing from logfiles of Mac_logger.py
%
clear all;
close all;

% import data
[time11,mac11,siglevel11] = import_log('1 - NE/2016-1-12-10-log_anonymous.txt')
[time12,mac12,siglevel12] = import_log('1 - NE/2016-1-12-11-log_anonymous.txt')
[time13,mac13,siglevel13] = import_log('1 - NE/2016-1-12-13-log_anonymous.txt')

[time21,mac21,siglevel21] = import_log('1 - NE/2016-1-12-10-log_anonymous.txt')
[time22,mac22,siglevel22] = import_log('1 - NE/2016-1-12-11-log_anonymous.txt')
[time23,mac23,siglevel23] = import_log('1 - NE/2016-1-12-13-log_anonymous.txt')

[time31,mac31,siglevel31] = import_log('1 - NE/2016-1-12-10-log_anonymous.txt')
[time32,mac32,siglevel32] = import_log('1 - NE/2016-1-12-11-log_anonymous.txt')
[time33,mac33,siglevel33] = import_log('1 - NE/2016-1-12-13-log_anonymous.txt')

[time41,mac41,siglevel41] = import_log('1 - NE/2016-1-12-10-log_anonymous.txt')
[time42,mac42,siglevel42] = import_log('1 - NE/2016-1-12-11-log_anonymous.txt')
[time43,mac43,siglevel43] = import_log('1 - NE/2016-1-12-13-log_anonymous.txt')

time1 = [time11; time12; time13;];
mac1 = [mac11;mac12;mac13];
siglevel1 = [siglevel11;siglevel12;siglevel13];

display('Count of observations:')
n_data1 = length(mac1)

[unique_time1, unique_mac1, unique_siglevel1] = find_unique_mac(time1, mac1, siglevel1)

%% Time interval

t_now = time(1); % time start


mac_list_dt = [mac(1)]; % macs in dt
time_list_dt = [time(1)];
siglevel_list_dt = [siglevel(1)]
count_list_dt = []

% input data
for i = 2:n_data
    % update mac_list_dt (remove old)
    t_now = time(i);
    for j = length(mac_list_dt):-1:1    % reversed order
        if time_list_dt(j) < t_now - minutes(dt)
            mac_list_dt = mac_list_dt(j:length(mac_list_dt));
            time_list_dt = time_list_dt(j:length(time_list_dt));
            siglevel_list_dt = siglevel_list_dt(j:length(siglevel_list_dt));
            break
        end
    end
    
    % add new data
    mac_list_dt = [mac_list_dt, mac(i)];
    time_list_dt = [time_list_dt, time(i)];
    siglevel_list_dt = [siglevel_list_dt, siglevel(i)];
    
    % count
    count_list_dt(i) = length(mac_list_dt);
    
    % time update
end
%%
[count_list_dt, time_list_dt] = n_mac_integrated(time,mac,siglevel,dt)



plot(time,count_list_dt)




